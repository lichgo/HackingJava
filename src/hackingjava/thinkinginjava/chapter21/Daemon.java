package hackingjava.thinkinginjava.chapter21;import java.util.concurrent.ThreadFactory;import java.util.concurrent.TimeUnit;// Make universal daemon threadsclass DaemonThreadFactory implements ThreadFactory {	@Override	public Thread newThread(Runnable r) {		// TODO Auto-generated method stub		// return null;		Thread thread = new Thread(r);		thread.setDaemon(true);		return thread;	}		// To implement, use it as parameter for thread pool	// Executors.newCachedThreadPool(new DaemonThreadFactory());}public class Daemon implements Runnable {	private int id;		public Daemon(int id) {		this.id = id;	}		public void run() {		try {			while (true) {				TimeUnit.MILLISECONDS.sleep(100);				System.out.println(Thread.currentThread() + ": "						+ id + " | " + this);			}		} catch (InterruptedException e) {			System.out.println("Sleep() interrupted.");		}				}		public static void main(String[] args) throws Exception {		for (int i = 0; i < 10; i++) {			Thread daemon = new Thread(new Daemon(i));			daemon.setDaemon(true);			daemon.start();		}		TimeUnit.MILLISECONDS.sleep(1000);	}}