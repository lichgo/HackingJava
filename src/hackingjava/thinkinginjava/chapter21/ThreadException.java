package hackingjava.thinkinginjava.chapter21;import java.util.concurrent.*;public class ThreadException implements Runnable {	public void run() {		Thread t = Thread.currentThread();	// Use this to referring itself		System.out.println("run() by " + t);		System.out.println();		System.out.println("EH: " + t.getUncaughtExceptionHandler());				throw new RuntimeException("Haha");	}		public static void main(String[] args) {		ExecutorService exec = Executors.newCachedThreadPool(				new HandlerThreadFactory());		exec.execute(new ThreadException());//		exec.shutdown();	}}// Define a exception handlerclass MyUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {	public void uncaughtException(Thread t, Throwable e) {		System.out.println("caught: " + e);	}}// Define a new thread factoryclass HandlerThreadFactory implements ThreadFactory {	public Thread newThread(Runnable r) {		Thread t = new Thread();		t.setUncaughtExceptionHandler(new MyUncaughtExceptionHandler());		System.out.println("EH: " + t.getUncaughtExceptionHandler());		return t;	}	}